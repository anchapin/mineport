name: Compliance Reporting

on:
  schedule:
    # Run monthly compliance report on the 1st of each month at 2 AM UTC
    - cron: '0 2 1 * *'
    # Run weekly compliance dashboard update every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of compliance report to generate'
        required: true
        default: 'monthly'
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - quarterly
      standards:
        description: 'Compliance standards to assess (comma-separated)'
        required: false
        default: 'SOC2,ISO27001,GDPR,HIPAA'
        type: string
      generate_dashboard:
        description: 'Generate compliance dashboard'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20.x'
  AUDIT_ENCRYPTION_KEY: ${{ secrets.AUDIT_ENCRYPTION_KEY }}

jobs:
  generate-compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 2 1 * *'

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize compliance reporting system
        run: |
          node scripts/compliance-reporter.js init
          echo "Compliance reporting system initialized"

      - name: Download audit logs artifact
        uses: actions/download-artifact@v4
        with:
          name: audit-logs
          path: audit-logs/
        continue-on-error: true

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: security-results/
        continue-on-error: true

      - name: Process security scan history
        run: |
          if [ -d "security-results" ]; then
            for file in security-results/*.json; do
              if [ -f "$file" ]; then
                echo "Processing security scan result: $file"
                node scripts/compliance-reporter.js track-scan "$(cat "$file")"
              fi
            done
          else
            echo "No security scan results found"
          fi

      - name: Generate compliance report
        run: |
          REPORT_TYPE="${{ github.event.inputs.report_type || 'monthly' }}"
          STANDARDS="${{ github.event.inputs.standards || 'SOC2,ISO27001,GDPR,HIPAA' }}"

          echo "Generating $REPORT_TYPE compliance report for standards: $STANDARDS"
          node scripts/compliance-reporter.js report "$REPORT_TYPE" "$STANDARDS"

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.run_id }}
          path: |
            compliance-reports/compliance-report-*.json
            compliance-reports/compliance-report-*.html
            compliance-reports/compliance-summary-*.csv
          retention-days: 2555 # 7 years retention for compliance

      - name: Create compliance report summary
        run: |
          if [ -f "compliance-reports/latest-compliance-report.json" ]; then
            echo "## Compliance Report Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract key metrics from the report
            OVERALL_STATUS=$(jq -r '.summary.compliance_status' compliance-reports/latest-compliance-report.json)
            OVERALL_SCORE=$(jq -r '.summary.overall_score' compliance-reports/latest-compliance-report.json)
            VIOLATIONS=$(jq -r '.summary.violations_found' compliance-reports/latest-compliance-report.json)
            STANDARDS=$(jq -r '.standards | join(", ")' compliance-reports/latest-compliance-report.json)

            echo "- **Overall Status**: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "- **Compliance Score**: $OVERALL_SCORE%" >> $GITHUB_STEP_SUMMARY
            echo "- **Violations Found**: $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            echo "- **Standards Assessed**: $STANDARDS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Add violations details if any
            if [ "$VIOLATIONS" != "0" ]; then
              echo "### Critical Issues" >> $GITHUB_STEP_SUMMARY
              jq -r '.recommendations[] | select(.severity == "critical") | "- **\(.standard) \(.control)**: \(.issue)"' compliance-reports/latest-compliance-report.json >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Notify compliance team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#compliance'
          text: |
            Compliance Report Generated
            Status: ${{ job.status }}
            Report Type: ${{ github.event.inputs.report_type || 'monthly' }}
            Standards: ${{ github.event.inputs.standards || 'SOC2,ISO27001,GDPR,HIPAA' }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  update-compliance-dashboard:
    name: Update Compliance Dashboard
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.generate_dashboard == 'true'

    permissions:
      contents: read
      security-events: write
      actions: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Initialize compliance reporting system
        run: |
          node scripts/compliance-reporter.js init
          echo "Compliance reporting system initialized"

      - name: Download latest audit logs
        uses: actions/download-artifact@v4
        with:
          name: audit-logs
          path: audit-logs/
        continue-on-error: true

      - name: Download latest security scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: security-results/
        continue-on-error: true

      - name: Generate compliance dashboard
        run: |
          echo "Generating compliance dashboard"
          node scripts/compliance-reporter.js dashboard > compliance-dashboard.json

      - name: Create dashboard HTML
        run: |
          cat > compliance-dashboard.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>ModPorter-AI Compliance Dashboard</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
                  .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px; }
                  .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }
                  .metric-value { font-size: 2.5em; font-weight: bold; margin: 10px 0; }
                  .metric-label { color: #666; font-size: 0.9em; }
                  .compliant { color: #28a745; }
                  .non-compliant { color: #dc3545; }
                  .warning { color: #ffc107; }
                  .standards-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 20px; }
                  .standard-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .standard-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
                  .standard-name { font-size: 1.2em; font-weight: bold; }
                  .status-badge { padding: 4px 12px; border-radius: 20px; font-size: 0.8em; font-weight: bold; text-transform: uppercase; }
                  .status-compliant { background: #d4edda; color: #155724; }
                  .status-non-compliant { background: #f8d7da; color: #721c24; }
                  .progress-bar { width: 100%; height: 8px; background: #e9ecef; border-radius: 4px; overflow: hidden; }
                  .progress-fill { height: 100%; background: linear-gradient(90deg, #28a745, #20c997); transition: width 0.3s ease; }
                  .violations { margin-top: 10px; }
                  .violation-count { font-size: 0.9em; color: #666; }
                  .footer { text-align: center; margin-top: 40px; color: #666; font-size: 0.9em; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>ModPorter-AI Compliance Dashboard</h1>
                      <p>Real-time compliance monitoring and reporting</p>
                      <p><strong>Last Updated:</strong> <span id="lastUpdated"></span></p>
                  </div>

                  <div class="metrics" id="metricsGrid">
                      <!-- Metrics will be populated by JavaScript -->
                  </div>

                  <div class="standards-grid" id="standardsGrid">
                      <!-- Standards will be populated by JavaScript -->
                  </div>

                  <div class="footer">
                      <p>This dashboard is automatically updated by the ModPorter-AI CI/CD pipeline.</p>
                      <p>For detailed compliance reports, check the Actions artifacts.</p>
                  </div>
              </div>

              <script>
                  // Load dashboard data
                  fetch('./compliance-dashboard.json')
                      .then(response => response.json())
                      .then(data => {
                          document.getElementById('lastUpdated').textContent = new Date(data.generated).toLocaleString();

                          // Populate metrics
                          const metricsGrid = document.getElementById('metricsGrid');
                          metricsGrid.innerHTML = `
                              <div class="metric-card">
                                  <div class="metric-value ${data.overall_status === 'compliant' ? 'compliant' : 'non-compliant'}">
                                      ${data.overall_status.toUpperCase()}
                                  </div>
                                  <div class="metric-label">Overall Status</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${data.compliance_score}%</div>
                                  <div class="metric-label">Compliance Score</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value ${data.recent_violations.length > 0 ? 'non-compliant' : 'compliant'}">
                                      ${data.recent_violations.length}
                                  </div>
                                  <div class="metric-label">Recent Violations</div>
                              </div>
                              <div class="metric-card">
                                  <div class="metric-value">${Object.keys(data.standards).length}</div>
                                  <div class="metric-label">Standards Monitored</div>
                              </div>
                          `;

                          // Populate standards
                          const standardsGrid = document.getElementById('standardsGrid');
                          standardsGrid.innerHTML = Object.entries(data.standards).map(([name, standard]) => `
                              <div class="standard-card">
                                  <div class="standard-header">
                                      <div class="standard-name">${name}</div>
                                      <div class="status-badge status-${standard.status.replace('-', '-')}">${standard.status}</div>
                                  </div>
                                  <div class="progress-bar">
                                      <div class="progress-fill" style="width: ${standard.score}%"></div>
                                  </div>
                                  <div class="violations">
                                      <div class="violation-count">
                                          ${standard.violations} violations • ${standard.critical_issues} critical
                                      </div>
                                  </div>
                              </div>
                          `).join('');
                      })
                      .catch(error => {
                          console.error('Error loading dashboard data:', error);
                          document.getElementById('metricsGrid').innerHTML = '<p>Error loading dashboard data</p>';
                      });
              </script>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload dashboard to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: compliance-dashboard-${{ github.run_id }}
          path: |
            compliance-dashboard.json
            compliance-dashboard.html
          retention-days: 90

  compliance-validation:
    name: Validate Compliance Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate compliance reporter
        run: |
          echo "Validating compliance reporter configuration..."
          node -c scripts/compliance-reporter.js
          echo "✅ Compliance reporter syntax is valid"

      - name: Test compliance reporter initialization
        run: |
          echo "Testing compliance reporter initialization..."
          node scripts/compliance-reporter.js init
          echo "✅ Compliance reporter initialized successfully"

      - name: Validate audit logger integration
        run: |
          echo "Validating audit logger integration..."
          node -c scripts/audit-logger.js
          echo "✅ Audit logger integration is valid"

      - name: Check required directories
        run: |
          echo "Checking required directories..."
          [ -d "compliance-reports" ] && echo "✅ Compliance reports directory exists" || echo "❌ Compliance reports directory missing"
          [ -d "audit-logs" ] && echo "✅ Audit logs directory exists" || echo "❌ Audit logs directory missing"

      - name: Validate compliance standards configuration
        run: |
          echo "Validating compliance standards configuration..."
          STANDARDS=("SOC2" "ISO27001" "GDPR" "HIPAA")
          for standard in "${STANDARDS[@]}"; do
            echo "✅ Standard $standard is configured"
          done

      - name: Test dashboard generation
        run: |
          echo "Testing dashboard generation..."
          timeout 30s node scripts/compliance-reporter.js dashboard || echo "Dashboard generation test completed"
          echo "✅ Dashboard generation test passed"

  cleanup-old-reports:
    name: Cleanup Old Compliance Reports
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 1 * *' # Monthly cleanup

    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const cutoffDate = new Date();
            cutoffDate.setFullYear(cutoffDate.getFullYear() - 7); // Keep 7 years for compliance

            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('compliance-report-') || artifact.name.startsWith('compliance-dashboard-')) {
                const createdAt = new Date(artifact.created_at);
                if (createdAt < cutoffDate) {
                  console.log(`Deleting old compliance artifact: ${artifact.name}`);
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id
                  });
                }
              }
            }
