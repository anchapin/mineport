name: Audit Logging System

on:
  workflow_call:
    inputs:
      operation_type:
        required: true
        type: string
        description: 'Type of operation being audited'
      operation_status:
        required: true
        type: string
        description: 'Status of the operation (started, completed, failed)'
      operation_metadata:
        required: false
        type: string
        default: '{}'
        description: 'Additional metadata as JSON string'
      enable_encryption:
        required: false
        type: boolean
        default: false
        description: 'Enable encryption for sensitive audit data'
    secrets:
      AUDIT_ENCRYPTION_KEY:
        required: false
        description: 'Encryption key for sensitive audit data'

jobs:
  audit-logging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --only=production
          chmod +x scripts/audit-logger.js
      
      - name: Initialize audit logging system
        run: |
          node scripts/audit-logger.js init
        env:
          AUDIT_ENCRYPTION_KEY: ${{ secrets.AUDIT_ENCRYPTION_KEY }}
      
      - name: Log audit entry
        run: |
          node scripts/audit-logger.js log '${{ inputs.operation_metadata }}'
        env:
          OPERATION_TYPE: ${{ inputs.operation_type }}
          OPERATION_STATUS: ${{ inputs.operation_status }}
          AUDIT_ENCRYPTION_KEY: ${{ secrets.AUDIT_ENCRYPTION_KEY }}
          ENABLE_ENCRYPTION: ${{ inputs.enable_encryption }}
      
      - name: Upload audit logs
        uses: actions/upload-artifact@v4
        with:
          name: audit-logs-${{ github.run_id }}
          path: audit-logs/
          retention-days: 365
          if-no-files-found: warn
      
      - name: Store audit logs in repository
        if: github.ref == 'refs/heads/main'
        run: |
          # Create audit logs directory in repository if it doesn't exist
          mkdir -p .github/audit-logs
          
          # Copy current audit logs to repository
          cp -r audit-logs/* .github/audit-logs/ 2>/dev/null || true
          
          # Commit audit logs if there are changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain .github/audit-logs/) ]]; then
            git add .github/audit-logs/
            git commit -m "chore: update audit logs [skip ci]"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  audit-analysis:
    runs-on: ubuntu-latest
    needs: audit-logging
    if: always()
    permissions:
      contents: read
      actions: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Download audit logs
        uses: actions/download-artifact@v4
        with:
          name: audit-logs-${{ github.run_id }}
          path: audit-logs/
      
      - name: Analyze audit logs
        run: |
          chmod +x scripts/audit-logger.js
          
          # Generate audit report for the last 24 hours
          START_DATE=$(date -d '24 hours ago' -u +"%Y-%m-%dT%H:%M:%SZ")
          END_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "Generating audit report from $START_DATE to $END_DATE"
          node scripts/audit-logger.js report "$START_DATE" "$END_DATE" > audit-report.json
          
          # Display report summary
          echo "## Audit Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Period:** $START_DATE to $END_DATE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics from report
          TOTAL_OPS=$(jq -r '.total_operations' audit-report.json)
          FAILED_OPS=$(jq -r '.failed_operations' audit-report.json)
          SECURITY_EVENTS=$(jq -r '.security_events' audit-report.json)
          
          echo "- **Total Operations:** $TOTAL_OPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Operations:** $FAILED_OPS" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Events:** $SECURITY_EVENTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add operations by type
          echo "### Operations by Type" >> $GITHUB_STEP_SUMMARY
          jq -r '.operations_by_type | to_entries[] | "- **\(.key):** \(.value)"' audit-report.json >> $GITHUB_STEP_SUMMARY
        env:
          AUDIT_ENCRYPTION_KEY: ${{ secrets.AUDIT_ENCRYPTION_KEY }}
      
      - name: Check for audit anomalies
        run: |
          # Check for suspicious patterns in audit logs
          FAILED_RATE=$(jq -r '(.failed_operations / .total_operations * 100) // 0' audit-report.json)
          SECURITY_RATE=$(jq -r '(.security_events / .total_operations * 100) // 0' audit-report.json)
          
          echo "Failed operation rate: ${FAILED_RATE}%"
          echo "Security event rate: ${SECURITY_RATE}%"
          
          # Alert if failure rate is too high
          if (( $(echo "$FAILED_RATE > 10" | bc -l) )); then
            echo "::warning::High failure rate detected: ${FAILED_RATE}%"
            echo "HIGH_FAILURE_RATE=true" >> $GITHUB_ENV
          fi
          
          # Alert if too many security events
          if (( $(echo "$SECURITY_RATE > 5" | bc -l) )); then
            echo "::warning::High security event rate detected: ${SECURITY_RATE}%"
            echo "HIGH_SECURITY_EVENTS=true" >> $GITHUB_ENV
          fi
      
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: audit-report-${{ github.run_id }}
          path: audit-report.json
          retention-days: 90
      
      - name: Send audit alerts
        if: env.HIGH_FAILURE_RATE == 'true' || env.HIGH_SECURITY_EVENTS == 'true'
        run: |
          # Send notification about audit anomalies
          echo "Audit anomalies detected - sending alerts"
          
          # This would integrate with your alerting system
          # For now, we'll create a GitHub issue
          gh issue create \
            --title "Audit Alert: Anomalous Activity Detected" \
            --body "Automated audit analysis has detected anomalous activity. Please review the audit logs and report." \
            --label "security,audit,alert" \
            --assignee "${{ github.actor }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}