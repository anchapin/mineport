name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Build application
        run: npm run build --if-present
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
          upload: true

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit with severity thresholds
        run: |
          echo "Running npm audit with different severity levels..."

          # Run audit for all levels and save results
          npm audit --audit-level=low --json > npm-audit-all.json || true
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=high --json > npm-audit-high.json || true

          # Display summary
          echo "=== NPM Audit Summary ==="
          npm audit --audit-level=moderate || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(npm audit --audit-level=high --json 2>/dev/null | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(npm audit --audit-level=high --json 2>/dev/null | jq -r '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          # Set outputs for later steps
          echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT

      - name: Run enhanced npm audit with SARIF output
        id: enhanced-audit
        run: |
          echo "Running enhanced npm audit for vulnerability detection..."
          
          # Create enhanced audit results with more details
          npm audit --json > npm-audit-raw.json || true
          
          # Enhanced npm audit with custom SARIF generation
          node -e "
            const audit = JSON.parse(require('fs').readFileSync('npm-audit-raw.json', 'utf8') || '{}');
            const sarif = {
              version: '2.1.0',
              runs: [{
                tool: {
                  driver: {
                    name: 'npm-audit',
                    version: '1.0.0',
                    informationUri: 'https://docs.npmjs.com/cli/audit',
                    rules: []
                  }
                },
                results: []
              }]
            };
            
            let totalVulns = 0;
            if (audit.vulnerabilities) {
              Object.entries(audit.vulnerabilities).forEach(([name, vuln]) => {
                totalVulns++;
                const rule = {
                  id: \`npm-audit-\${vuln.severity}\`,
                  shortDescription: { text: \`\${vuln.severity} vulnerability in \${name}\` },
                  fullDescription: { text: vuln.title || 'Vulnerability detected' },
                  properties: { severity: vuln.severity }
                };
                sarif.runs[0].tool.driver.rules.push(rule);
                
                const result = {
                  ruleId: \`npm-audit-\${vuln.severity}\`,
                  level: vuln.severity === 'critical' ? 'error' : vuln.severity === 'high' ? 'error' : 'warning',
                  message: { text: \`\${vuln.severity} vulnerability in \${name}: \${vuln.title || 'No description'}\` },
                  locations: [{
                    physicalLocation: {
                      artifactLocation: { uri: 'package.json' },
                      region: { startLine: 1 }
                    }
                  }]
                };
                sarif.runs[0].results.push(result);
              });
            }
            
            require('fs').writeFileSync('npm-audit.sarif', JSON.stringify(sarif, null, 2));
            console.log(\`Generated SARIF with \${totalVulns} vulnerabilities\`);
          " 2>/dev/null || echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "npm-audit"}}, "results": []}]}' > npm-audit.sarif
          
          echo "Enhanced npm audit completed"

      - name: Upload npm audit results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: npm-audit.sarif

      - name: Create security advisories for high-severity issues
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECURITY_SEVERITY_THRESHOLD: high
        run: |
          # Make the script executable
          chmod +x scripts/create-security-advisory.js

          # Run the security advisory creation script
          node scripts/create-security-advisory.js

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: |
            npm-audit-results.json
            npm-audit-high.json
            npm-audit-all.json
          retention-days: 30

      - name: Upload npm audit results (enhanced)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results-enhanced
          path: |
            npm-audit-raw.json
            npm-audit.sarif
          retention-days: 30

      - name: Fail on critical vulnerabilities
        if: steps.run-npm-audit-with-severity-thresholds.outputs.critical_vulns > 0
        run: |
          echo "❌ Critical vulnerabilities detected!"
          echo "Critical vulnerabilities found: ${{ steps.run-npm-audit-with-severity-thresholds.outputs.critical_vulns }}"
          echo "Please address these vulnerabilities before proceeding."
          exit 1

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks scan
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

      - name: Process GitLeaks results
        id: process-gitleaks-results
        if: always()
        run: |
          # Check if results file exists and process it
          if [ -f "results.sarif" ]; then
            echo "GitLeaks scan completed. Processing results..."
            
            # Count the number of secrets found
            SECRETS_COUNT=$(jq '.runs[0].results | length' results.sarif 2>/dev/null || echo "0")
            echo "Secrets found: $SECRETS_COUNT"
            
            # Set output for later steps
            echo "secrets_found=$SECRETS_COUNT" >> $GITHUB_OUTPUT
            
            # If secrets found, create detailed report
            if [ "$SECRETS_COUNT" -gt "0" ]; then
              echo "⚠️ Secrets detected in repository!"
              echo "Creating detailed report..."
              
              # Extract secret details
              jq -r '.runs[0].results[] | "- **" + .ruleId + "**: " + .message.text + " (File: " + .locations[0].physicalLocation.artifactLocation.uri + ", Line: " + (.locations[0].physicalLocation.region.startLine | tostring) + ")"' results.sarif > secrets-summary.txt
              
              echo "## 🚨 Secrets Detected" > secrets-report.md
              echo "" >> secrets-report.md
              echo "The following secrets were detected in the repository:" >> secrets-report.md
              echo "" >> secrets-report.md
              cat secrets-summary.txt >> secrets-report.md
              echo "" >> secrets-report.md
              echo "**Action Required:** Please remove these secrets from the repository and rotate any exposed credentials." >> secrets-report.md
              
              # Display the report
              cat secrets-report.md
            else
              echo "✅ No secrets detected"
            fi
          else
            echo "No GitLeaks results file found"
            echo "secrets_found=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload GitLeaks results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('results.sarif') != ''
        with:
          sarif_file: results.sarif

      - name: Upload GitLeaks artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-results
          path: |
            results.sarif
            secrets-report.md
            secrets-summary.txt
          retention-days: 30

      - name: Comment on PR with secret detection results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const secretsFound = '${{ steps.process-gitleaks-results.outputs.secrets_found }}';

            let comment = '## 🔐 Secret Detection Results\n\n';

            if (secretsFound === '0') {
              comment += '✅ **No secrets detected** in this pull request.\n\n';
              comment += 'The code has been scanned for potential secrets, API keys, and sensitive information.';
            } else {
              comment += `❌ **${secretsFound} potential secret(s) detected** in this pull request.\n\n`;
              
              // Try to read the detailed report
              try {
                if (fs.existsSync('secrets-report.md')) {
                  const report = fs.readFileSync('secrets-report.md', 'utf8');
                  comment += report;
                }
              } catch (error) {
                comment += 'Please check the security tab for detailed information about the detected secrets.';
              }
              
              comment += '\n\n**This pull request cannot be merged until all secrets are removed.**';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Block PR merge if secrets detected
        if: github.event_name == 'pull_request' && steps.process-gitleaks-results.outputs.secrets_found != '0'
        run: |
          echo "❌ Secrets detected in pull request!"
          echo "Found ${{ steps.process-gitleaks-results.outputs.secrets_found }} potential secrets"
          echo "Pull request cannot be merged until all secrets are removed"
          echo ""
          echo "Please:"
          echo "1. Remove the detected secrets from your code"
          echo "2. Rotate any exposed credentials"
          echo "3. Consider using environment variables or secure secret management"
          echo "4. Push the changes to update this pull request"
          exit 1

      - name: Fail workflow on secrets in main branch
        if: github.ref == 'refs/heads/main' && steps.process-gitleaks-results.outputs.secrets_found != '0'
        run: |
          echo "❌ Secrets detected in main branch!"
          echo "This is a critical security issue that needs immediate attention"
          echo "Found ${{ steps.process-gitleaks-results.outputs.secrets_found }} potential secrets"
          exit 1

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event_name == 'schedule'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t modporter-ai:${{ github.sha }} .
          else
            echo "No Dockerfile found, skipping container scan"
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: hashFiles('Dockerfile') != ''
        with:
          image-ref: 'modporter-ai:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('Dockerfile') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  security-summary:
    name: Security Summary & Reporting
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, container-scan]
    if: always()
    permissions:
      contents: read
      security-events: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create results directory structure
        run: |
          echo "📁 Creating directory structure for security results..."
          mkdir -p security-results consolidated-results
          echo "Directories created"

      - name: Download all artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          path: security-results
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create placeholder files if artifacts not available
        run: |
          echo "📋 Checking for security scan results and creating placeholders if needed..."
          
          # Create placeholder npm audit results if not found
          if [ ! -f "npm-audit-results.json" ] && [ ! -f "security-results/npm-audit-results/npm-audit-results.json" ]; then
            echo '{"vulnerabilities": {}, "metadata": {"vulnerabilities": {"total": 0}}}' > npm-audit-results.json
            echo "Created placeholder npm-audit-results.json"
          fi
          
          # Create placeholder enhanced audit results if not found
          if [ ! -f "npm-audit-raw.json" ] && [ ! -f "security-results/npm-audit-results-enhanced/npm-audit-raw.json" ]; then
            echo '{"vulnerabilities": {}, "metadata": {"vulnerabilities": {"total": 0}}}' > npm-audit-raw.json
            echo "Created placeholder npm-audit-raw.json"
          fi
          
          # Create placeholder GitLeaks results if not found
          if [ ! -f "results.sarif" ] && [ ! -f "security-results/gitleaks-results/results.sarif" ]; then
            echo '{"runs": [{"results": []}]}' > results.sarif
            echo "Created placeholder results.sarif"
          fi

      - name: Prepare security scan results
        run: |
          echo "📋 Preparing security scan results for analysis..."

          # Copy all result files to the current directory for easier processing
          find security-results -name "*.json" -exec cp {} . 2>/dev/null \; || true
          find security-results -name "*.sarif" -exec cp {} . 2>/dev/null \; || true
          find security-results -name "*.md" -exec cp {} . 2>/dev/null \; || true
          find security-results -name "*.txt" -exec cp {} . 2>/dev/null \; || true

          # List all available files for debugging
          echo "Available result files:"
          ls -la *.json *.sarif *.md *.txt 2>/dev/null || echo "Using placeholder files for analysis"

      - name: Generate comprehensive security report
        id: security-report
        run: |
          echo "🔍 Generating comprehensive security report..."

          # Check if security report generator exists
          if [ ! -f "scripts/generate-security-report.js" ]; then
            echo "❌ Security report generator script not found"
            echo "overall_status=error" >> $GITHUB_OUTPUT
            echo "total_issues=0" >> $GITHUB_OUTPUT
            echo "critical_issues=0" >> $GITHUB_OUTPUT
            echo "secrets_found=0" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Make the script executable
          chmod +x scripts/generate-security-report.js

          # Run the security report generator with error handling
          if node scripts/generate-security-report.js; then
            echo "✅ Security report generated successfully"
            
            # Extract outputs from generated report if available
            if [ -f "security-report.json" ]; then
              OVERALL_STATUS=$(jq -r '.summary.overall_status // "unknown"' security-report.json)
              TOTAL_ISSUES=$(jq -r '.summary.total_issues // 0' security-report.json)
              CRITICAL_ISSUES=$(jq -r '.summary.critical_issues // 0' security-report.json)
              SECRETS_FOUND=$(jq -r '.summary.secrets_found // 0' security-report.json)
            else
              OVERALL_STATUS="partial"
              TOTAL_ISSUES=0
              CRITICAL_ISSUES=0
              SECRETS_FOUND=0
            fi
          else
            echo "⚠️ Security report generation encountered issues, creating fallback report"
            # Create fallback report
            echo '{
              "summary": {
                "overall_status": "partial",
                "total_issues": 0,
                "critical_issues": 0,
                "secrets_found": 0
              },
              "metadata": {
                "timestamp": "'$(date -Iseconds)'",
                "status": "fallback"
              }
            }' > security-report.json
            
            OVERALL_STATUS="partial"
            TOTAL_ISSUES=0
            CRITICAL_ISSUES=0
            SECRETS_FOUND=0
          fi
          
          # Set outputs
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "secrets_found=$SECRETS_FOUND" >> $GITHUB_OUTPUT

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            security-report.md
            security-dashboard.json
          retention-days: 90

      - name: Create security dashboard issue (on main branch)
        if: github.ref == 'refs/heads/main' && steps.security-report.outputs.overall_status != 'passed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              // Read the generated report
              const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              const markdownReport = fs.readFileSync('security-report.md', 'utf8');
              
              // Create or update security dashboard issue
              const title = `🔒 Security Dashboard - ${new Date().toISOString().split('T')[0]}`;
              
              const body = `# Security Dashboard Report
              
              **Status:** ${report.summary.overall_status.toUpperCase()}
              **Generated:** ${report.metadata.timestamp}
              **Commit:** ${report.metadata.commit}
              **Workflow:** [${report.metadata.workflow_run}](${context.payload.repository.html_url}/actions/runs/${report.metadata.workflow_run})
              
              ## Quick Summary
              - **Total Issues:** ${report.summary.total_issues}
              - **Critical Issues:** ${report.summary.critical_issues}
              - **High Severity:** ${report.summary.high_issues}
              - **Secrets Found:** ${report.summary.secrets_found}
              
              ${markdownReport}
              
              ---
              *This issue is automatically updated by the security scanning pipeline.*
              *Last updated: ${new Date().toISOString()}*`;
              
              // Look for existing security dashboard issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security-dashboard',
                state: 'open'
              });
              
              if (issues.data.length > 0) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issues.data[0].number,
                  title: title,
                  body: body
                });
                console.log(`Updated security dashboard issue #${issues.data[0].number}`);
              } else {
                // Create new issue
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security-dashboard', 'security', 'automated']
                });
                console.log(`Created security dashboard issue #${issue.data.number}`);
              }
            } catch (error) {
              console.error('Error managing security dashboard issue:', error);
            }

      - name: Comment on PR with detailed security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              
              const statusEmoji = {
                'passed': '✅',
                'passed_with_issues': '⚠️',
                'warning': '⚠️',
                'failed': '❌',
                'critical': '🚨'
              };
              
              const emoji = statusEmoji[report.summary.overall_status] || '❓';
              
              let comment = `## 🔒 Security Scan Results ${emoji}
              
              **Overall Status:** ${emoji} ${report.summary.overall_status.toUpperCase().replace('_', ' ')}
              **Scan Timestamp:** ${report.metadata.timestamp}
              **Security Score:** ${report.trends?.security_score || 'N/A'}/100
              
              ### Summary
              - **Total Issues:** ${report.summary.total_issues}
              - **Critical Issues:** ${report.summary.critical_issues}
              - **High Severity:** ${report.summary.high_issues}
              - **Secrets Found:** ${report.summary.secrets_found}
              
              ### Scan Details
              | Scan Type | Status | Issues Found |
              |-----------|--------|--------------|
              | Static Analysis (CodeQL) | ${report.scans.static_analysis.status} | ${report.scans.static_analysis.issues} |
              | Dependencies | ${report.scans.dependencies.status} | ${report.scans.dependencies.vulnerabilities} |
              | Secret Detection | ${report.scans.secrets.status} | ${report.scans.secrets.secrets} |
              | Container Security | ${report.scans.containers.status} | ${report.scans.containers.vulnerabilities} |`;
              
              // Add recommendations if any
              if (report.recommendations && report.recommendations.length > 0) {
                comment += '\n\n### 🎯 Recommendations\n';
                report.recommendations.forEach(rec => {
                  const priorityEmoji = rec.priority === 'critical' ? '🚨' : 
                                      rec.priority === 'high' ? '⚠️' : 'ℹ️';
                  comment += `\n${priorityEmoji} **${rec.title}**\n${rec.description}\n`;
                });
              }
              
              comment += `\n\n---
              View detailed results in the [Security tab](${context.payload.repository.html_url}/security).
              
              ${report.summary.overall_status === 'failed' || report.summary.overall_status === 'critical' ? 
                '⚠️ **This pull request cannot be merged until security issues are resolved.**' : 
                '✅ **Security checks passed. Safe to merge.**'
              }`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating security report comment:', error);
            }

      - name: Send security alerts (critical issues)
        if: steps.security-report.outputs.overall_status == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            // This would integrate with external alerting systems
            // For now, we'll create a high-priority issue

            const report = JSON.parse(require('fs').readFileSync('security-report.json', 'utf8'));

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 CRITICAL SECURITY ALERT - Immediate Action Required`,
              body: `# 🚨 Critical Security Issues Detected
              
              **Repository:** ${context.repo.owner}/${context.repo.repo}
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Detected:** ${new Date().toISOString()}
              
              ## Critical Issues Summary
              - **Critical Issues:** ${report.summary.critical_issues}
              - **Secrets Found:** ${report.summary.secrets_found}
              - **Total Issues:** ${report.summary.total_issues}
              
              ## Immediate Actions Required
              ${report.recommendations.filter(r => r.priority === 'critical').map(r => 
                `- **${r.title}**: ${r.description}`
              ).join('\n')}
              
              ## Next Steps
              1. **Immediate:** Address all critical security issues
              2. **Rotate:** Any exposed credentials or secrets
              3. **Review:** Security scan results in detail
              4. **Validate:** Run security scans after fixes
              
              **This is an automated alert from the security scanning pipeline.**
              **Workflow Run:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['security', 'critical', 'P0', 'automated'],
              assignees: [] // Add security team members here
            });

            console.log(`Created critical security alert issue #${issue.data.number}`);

      - name: Fail workflow on critical security issues
        if: steps.security-report.outputs.overall_status == 'critical' || steps.security-report.outputs.overall_status == 'failed'
        run: |
          echo "❌ Security scan failed due to critical security issues"
          echo "Overall Status: ${{ steps.security-report.outputs.overall_status }}"
          echo "Critical Issues: ${{ steps.security-report.outputs.critical_issues }}"
          echo "Secrets Found: ${{ steps.security-report.outputs.secrets_found }}"
          echo ""
          echo "Please review the security report and address all critical issues before proceeding."
          echo "Detailed report available in the artifacts and security dashboard."
          exit 1
